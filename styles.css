/* * {
    border: 1px solid red;
} */


/* @media settings */
/* validation settings */

@font-face {
    font-family: Norse-Bold;
    src: url(Norse-Bold.otf);
}

@font-face {
    font-family: Sono;
    src: url(Sono/static/Sono/Sono-Regular.ttf);
}

body {
    display: grid;
    grid-template-columns: 1fr 2fr;
    height: 100vh;
}

.right {
    display: grid;
    grid-template-rows: 1fr 1fr 1fr;
    background-color: #F9FAFB;
}

.left {
    background-image: url('bagels.jpg');
    background-size: cover;
}

.logodiv {
    background-color: rgb(0, 0, 0, .4);
    color: white;
    font-size: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 3.5em;
    position: relative;
    top: 30vh;
    font-family: Norse-Bold;
}

.logodiv img {
    height: 3em;
}

.middle {
    background-color: white;
}

.tophalf {
    height: 50%;
}

.right p {
    padding-left: 1em;
    font-family: Sono;
}



.top, .middle p {
    /* padding-left: 1em; */
    align-self: flex-end;
    font-weight: bold;
    font-size: 1.2em;
}

button {
    margin: 1em;
    border-radius: 4px;
    background-color: #ae622e;
    color:#F9FAFB;
    padding: 10px 30px 10px 30px;
    font-weight: bold;
}

form {
    display: flex;
    flex-direction: column;
    font-size: .7em;
    margin-left: 2em;
}

fieldset {
    display: flex;
    margin: 1em;
    border: 0em;
}

input {
    border: 1px solid lightgrey;
    border-radius: 5px;
    /* outline: none; */
}

input:focus {
    border-color: rgba(125, 125, 193, 0.2); 
    /* box-shadow: 3px 3px 2px rgba(3, 3, 3, .1); */
    box-shadow: 5px 5px 10px lightgrey;
    /* outline: lightblue; */
}

input:not(:placeholder-shown):invalid {
    border: 1px solid red; 
}

input:valid {
    border: 1px solid blue; 
}


/* Javascript function for validation???

function validateInput(event) {
  if (event.target.validity.valid) {
    event.target.style.border = ''; 
  } else {
    event.target.style.border = '1px solid red'; 
  }
}

input {
  border: 1px solid #ccc;
} 

input:focus {
  border: 1px solid red; 
} */

/* A better solution for this use case is to use the :invalid:valid selector.
This will select inputs that are:

:invalid - Invalid (doesn't validate based on its rules, like required or type mismatch)
:valid - But only after they have been modified (on blur or input event).

So you can do:
input:invalid:valid {
    border: 1px solid red; 
}

This will ensure the red border only shows up after the user has interacted with the input, and it's still invalid. */